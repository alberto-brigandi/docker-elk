input {
  tcp {
    port => 5000
  }
  gelf {
  }
}

## Add your filters / logstash plugins configuration here
filter {
  if "orchestrator" in [container_name] {
    if [message] =~ "^\{.+\}$" {
      json {
        source => "message"
        add_tag => [ "json_message" ]
      }
    }
    if ("json_message" in [tags] and [message] =~ "^\{.+\}$") {
      json {
        source => "message"
        add_tag => [ "json_inner_message" ]
      }
    }
    if "json_inner_message" in [tags] {
      if [type] == "request" {
        mutate {
          replace => { "message" => "Request %{request_id} (%{http_method} %{uri}) - START" }
        }
      } else if [type] == "response" {
        mutate {
          replace => { "message" => "Request %{request_id} (%{http_method} %{uri}) - END" }
        }
      }
      mutate {
        rename => { "type" => "http_request_phase" }
      }
      if [headers] { # lowercase all headers (they are case insensitive anyway)
        ruby {
          code => "event.set('headers', event.get('headers').map {|k, v| [k.downcase, v] }.to_h)"
        }
      }
      if ("" in [headers][user-agent]) {
        useragent {
          source => "headers[user-agent]"
          target => "user_agent"
       }
     }
#    if ("" in [headers][authorization]) {
#      anonymize {
#        fields => ["headers[authorization]"]
#        key => "fsdgergeruihgaejgijaidfhsduih"
#        add_tag => ["anomimized_authorization_header"]
#      }
#    }
    }
    if ("" in [client_ip]) {
      geoip {
        source => "client_ip"
      }
    }
  }
}
 
output {
  elasticsearch {
    hosts => "elasticsearch:9200"
  }
}
